{:objects
 {:pin
  {:description "An IO pin."
   :fields
   {:id {:type (non-null ID)}
    :board_value {:type Boolean}
    :logical_value {:type Boolean}
    :pin_number {:type Int}}}
  :ip
  {:description "The Raspberry Pi's IP address."
   :fields
   {:inet4 {:type String}}}
  :alarms
  {:description "Alarms states."
   :fields
   {:limit_switch_hit_unexpectedly {:type Boolean}
    :homing_failed {:type Boolean}}}
  :procedure_run_status
  {:description "Contains information about the currently running procedure, if any."
   :fields
   {:current_procedure_id {:type ID :description "CouchDB ID of the currently running procedure. Nil if no procedure is running."}
    :current_procedure_name {:type String :description "Name of the currently running procedure. Nil if no procedure is running."}
    :current_procedure_step_number {:type Int :description "One-indexed number of the current procedure step in the currently running procedure. Nil if no procedure is running."}
    :current_procedure_step_start_time {:type String :description "Start time of the current procedure step in the currently running procedure. Nil if no procedure is running or if the slide holder is currently en route to a staining jar."}
    :current_cycle_number {:type Int :description "The cycle number, one-indexed, of how many times the procedure has been repeated in a single run."}}
   }
  :state
  {:description "Information about the current state of the device."
   :fields
   {:contents {:type String :description "State atom that stores configuration info, for internal use only."}
    :alarms {:type :alarms}
    :procedure_run_status {:type :procedure_run_status}
    :stopped {:type Boolean :description "Whether or not the current motion is stopped & cancelled."}
    :motor_lock {:type Boolean :description "A lock used internally to ensure only one function is trying to turn motors at once. True = locked, False = unlocked."}
    }}
  :axis
  {:description "A axis of motion on the device."
   :fields {
            :id {:type (non-null ID)}
            :position {:type Int :description "Position in steps from the axis's home."}
            :position_inches {:type Float :description "Position in inches from the axis's home."}
            :travel_distance_per_turn {:type Float :description "Travel in inches per revolution"}
            :position_limit {:type Float :description "Maximum position in inches"}
            :pulses_per_revolution {:type Int :description "The number of pulses to complete a single revolution."}
            :alarms {:type :alarms}}}
  :procedure_step
  {:description "A single step in a staining procedure."
   :fields {:substance {:type String :description "The substance contained in the jar"}
            :time_in_seconds {:type Int :description "The time (in seconds) to immerse the slide in the staining jar."}
            :jar_number {:type Int :description "The one-indexed jar number in which the slide is to be immersed."}}}
  :procedure
  {:description "A staining procedure"
   :fields {:_id  {:type ID :description "The CouchDB _id of the procedure."}
            :_rev {:type ID :description "The CouchDB _rev of the procedure."}
            :type {:type String :description "The CouchDB type of the procedure. Will always be :procedure."}
            :name {:type String :description "Name of the procedure."}
            :jar_contents {:type (list String) :description "List of contents of what substanc is in jar."}
            :procedure_steps {:type (list :procedure_step) :description "A list of steps in the staining procedure."}
            :repeat {:type Int :description "Number of times to repeat a given procedure for a single run."}
            :runs {:type Int :description "Number of times this procedure has ever been run."}
            }}
  :settings
  {:description "Various settings for the slide stainer device"
   :fields {:developer {:type Boolean :description "Boolean that controls whether to show certain features such as the GraphQL control in the settings menu."}}}}

 :input-objects
 {
  :procedure_step_input_object
  {:description "A single step in a staining procedure."
   :fields {:substance {:type String :description "The substance contained in the jar"}
            :time_in_seconds {:type Int :description "The time (in seconds) to immerse the slide in the staining jar."}
            :jar_number {:type Int :description "The one-indexed jar number in which the slide is to be immersed."}}}
  :procedure_input_object
  {:description "A staining procedure"
   :fields {:_id  {:type ID :description "The CouchDB _id of the procedure."}
            :_rev {:type ID :description "The CouchDB _rev of the procedure."}
            :type {:type String :description "The CouchDB type of the procedure. Will always be :procedure."}
            :name {:type String :description "Name of the procedure."}
            :jar_contents {:type (list String) :description "List of contents of what substanc is in jar."}
            :procedure_steps {:type (list :procedure_step_input_object) :description "A list of steps in the staining procedure."}
            :repeat {:type Int :description "Number of times to repeat a given procedure for a single run."}
            :runs {:type Int :description "Number of times this procedure has ever been run."}
            }}
  }
 
 :queries
 {:pin_by_id
  {:type :pin
   :description "A pin on the Raspberry Pi."
   :args {:id {:type ID}}
   :resolve :query/pin_by_id}
  :pins
  {:type (list :pin)
   :description "All pins utilized by the slide stainer app."
   :resolve :query/pins}
  :procedure_by_id
  {:type :procedure
   :description "Looks up a staining procedure, given an ID."
   :args {:_id {:type ID}}
   :resolve :query/procedure_by_id}
  :procedures
  {:type (list :procedure)
   :description "Retrieves information for all procedures."
   :resolve :query/procedures}
  :ip
  {:type :ip
   :description "The Raspberry Pi's IP address."
   :resolve :query/ip}
  :state
  {:type :state
   :resolve :query/state}
  :axis
  {:type :axis
   :args {:id {:type ID}}
   :resolve :query/axis}
  :settings
  {:type :settings
   :resolve :query/settings}}
 
 :mutations
 {:set_pin
  {:type :pin
   :description "Sets values of a pin."
   :args {:id {:type ID}
          :logical_value {:type Boolean}}
   :resolve :mutation/set_pin}
  :set_axis
  {:type :axis
   :description "Sets the position of an axis causing motion."
   :args {:id {:type ID}
          :position {:type Int}
          :position_inches {:type Float}
          :travel_distance_per_turn {:type Float :description "Travel in inches per revolution"}
          :position_limit {:type Float :description "Maximum position in inches"}
          :pulses_per_revolution {:type Int :description "The number of pulses to complete a single revolution."}}
   :resolve :mutation/set_axis}
  :move_by_pulses
  {:type :axis
   :description "Moves an axis by a certain number of pulses. Does not do bounds checking, so (physical) crashes are possible."
   :args {:id {:type ID}
          :pulses {:type Int}}
   :resolve :mutation/move_by_pulses}
  :move_relative
  {:type :axis
   :description "Attemps to move an axis by a relative amount."
   :args {:id {:type ID}
          :increment {:type Float}}
   :resolve :mutation/move_relative}
  :move_to_position
  {:type :axis
   :description "Attempts to move an axis to a position."
   :args {:id {:type ID}
          :position {:type Float}}
   :resolve :mutation/move_to_position}
  :move_to_jar
  {:type :axis
   :description "Attempts to move an axis to a given jar."
   :args {:jar {:type Int}}
   :resolve :mutation/move_to_jar}
  :clean_up_pins
  {:type :state
   :description "Cleans up the pins."
   :resolve :mutation/clean_up_pins}
  :home
  {:type :state
   :description "Home both axis."
   :resolve :mutation/home}
  :clear_alarms
  {:type :state
   :description "Clears all alarms."
   :resolve :mutation/clear_alarms}
  :run_procedure
  {:type :state
   :description "Runs a procedure with the given name."
   :args {:_id {:type ID}}
   :resolve :mutation/run_procedure}
  :save_procedure
  {:type :procedure
   :description "Saves a procedure."
   :args {:procedure {:type :procedure_input_object}}
   :resolve :mutation/save_procedure}
  :drop_motor_lock
  {:type :state
  :description "Clears the motor lock. For debugging purposes only."
   :resolve :mutation/drop_motor_lock}
  :configure_database
  {:type :state
   :descriptions "Sets up CouchDB."
   :resolve :mutation/configure_database}
   }}
